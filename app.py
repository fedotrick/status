import streamlit as st
import pandas as pd
import re
from datetime import datetime, timedelta
import os
import openpyxl
from openpyxl.styles import Font, PatternFill

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã Streamlit
st.set_page_config(
    page_title="–°–∏—Å—Ç–µ–º–∞ —É—á–µ—Ç–∞ –º–∞—Ä—à—Ä—É—Ç–Ω—ã—Ö –∫–∞—Ä—Ç",
    page_icon="üìã",
    layout="wide",
    initial_sidebar_state="expanded"
)

# –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
st.title("–°–∏—Å—Ç–µ–º–∞ —É—á–µ—Ç–∞ –º–∞—Ä—à—Ä—É—Ç–Ω—ã—Ö –∫–∞—Ä—Ç")

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫
tab1, tab2, tab3 = st.tabs(["–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", "–ü—Ä–æ—Å–º–æ—Ç—Ä –¥–∞–Ω–Ω—ã—Ö", "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"])

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
EXCEL_FILE = "–º–∞—Ä—à—Ä—É—Ç–Ω—ã–µ_–∫–∞—Ä—Ç—ã.xlsx"

# –°–æ–∑–¥–∞–Ω–∏–µ Excel —Ñ–∞–π–ª–∞, –µ—Å–ª–∏ –æ–Ω –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
def create_excel_file():
    """–°–æ–∑–¥–∞–Ω–∏–µ Excel —Ñ–∞–π–ª–∞ —Å —Ç–∞–±–ª–∏—Ü–µ–π –º–∞—Ä—à—Ä—É—Ç–Ω—ã—Ö –∫–∞—Ä—Ç, –µ—Å–ª–∏ –æ–Ω –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç."""
    if not os.path.exists(EXCEL_FILE):
        # –°–æ–∑–¥–∞–µ–º DataFrame —Å –Ω—É–∂–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π
        df = pd.DataFrame(columns=[
            "id", 
            "–ù–æ–º–µ—Ä_–±–ª–∞–Ω–∫–∞", 
            "–£—á–µ—Ç–Ω—ã–π_–Ω–æ–º–µ—Ä", 
            "–ù–æ–º–µ—Ä_–∫–ª–∞—Å—Ç–µ—Ä–∞", 
            "–°—Ç–∞—Ç—É—Å", 
            "–î–∞—Ç–∞_—Å–æ–∑–¥–∞–Ω–∏—è", 
            "–ü—É—Ç—å_–∫_—Ñ–∞–π–ª—É"
        ])
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Excel
        df.to_excel(EXCEL_FILE, index=False, sheet_name="–ú–∞—Ä—à—Ä—É—Ç–Ω—ã–µ_–∫–∞—Ä—Ç—ã")
        st.success(f"–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —Ñ–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {EXCEL_FILE}")

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Excel
def load_data():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Excel —Ñ–∞–π–ª–∞."""
    try:
        if not os.path.exists(EXCEL_FILE):
            create_excel_file()
        
        df = pd.read_excel(EXCEL_FILE, engine='openpyxl')
        return df
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return pd.DataFrame()

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ Excel
def save_data(df):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ Excel —Ñ–∞–π–ª."""
    try:
        df.to_excel(EXCEL_FILE, index=False, sheet_name="–ú–∞—Ä—à—Ä—É—Ç–Ω—ã–µ_–∫–∞—Ä—Ç—ã")
        return True
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False

# –§—É–Ω–∫—Ü–∏–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
def validate_account_number(account_number):
    """–í–∞–ª–∏–¥–∞—Ü–∏—è —É—á–µ—Ç–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ (—Ñ–æ—Ä–º–∞—Ç: –ú–ú-–ù–ù–ù/–ì–ì)."""
    pattern = r"^\d{2}-\d{3}/\d{2}$"
    return bool(re.match(pattern, account_number))

def validate_cluster_number(cluster_number):
    """–í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞ –∫–ª–∞—Å—Ç–µ—Ä–∞ (—Ñ–æ—Ä–º–∞—Ç: –ö–ì–ì/–ú–ú-–ù–ù–ù)."""
    pattern = r"^–ö\d{2}/\d{2}-\d{3}$"
    return bool(re.match(pattern, cluster_number))

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —É—á–µ—Ç–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
def check_account_number_exists(account_number):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —É—á–µ—Ç–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."""
    df = load_data()
    if not df.empty:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É—á–µ—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Å —Å—Ç–∞—Ç—É—Å–æ–º "–ó–∞–≤–µ—Ä—à–µ–Ω–∞"
        mask = (df["–£—á–µ—Ç–Ω—ã–π_–Ω–æ–º–µ—Ä"] == account_number) & (df["–°—Ç–∞—Ç—É—Å"] == "–ó–∞–≤–µ—Ä—à–µ–Ω–∞")
        return mask.any()
    return False

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –Ω–æ–º–µ—Ä–∞ –∫–ª–∞—Å—Ç–µ—Ä–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
def check_cluster_number_exists(cluster_number):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –Ω–æ–º–µ—Ä–∞ –∫–ª–∞—Å—Ç–µ—Ä–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."""
    df = load_data()
    if not df.empty:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –Ω–æ–º–µ—Ä –∫–ª–∞—Å—Ç–µ—Ä–∞ —Å —Å—Ç–∞—Ç—É—Å–æ–º "–ó–∞–≤–µ—Ä—à–µ–Ω–∞"
        mask = (df["–ù–æ–º–µ—Ä_–∫–ª–∞—Å—Ç–µ—Ä–∞"] == cluster_number) & (df["–°—Ç–∞—Ç—É—Å"] == "–ó–∞–≤–µ—Ä—à–µ–Ω–∞")
        return mask.any()
    return False

# –í–∫–ª–∞–¥–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
with tab1:
    st.header("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–Ω–æ–π –∫–∞—Ä—Ç—ã")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Å—Å–∏–∏
    if "blank_number" not in st.session_state:
        st.session_state.blank_number = ""
    if "account_number" not in st.session_state:
        st.session_state.account_number = ""
    if "cluster_number" not in st.session_state:
        st.session_state.cluster_number = ""
    if "record_found" not in st.session_state:
        st.session_state.record_found = False
    if "can_edit" not in st.session_state:
        st.session_state.can_edit = False
    
    # –§–æ—Ä–º–∞ –¥–ª—è –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö
    blank_number = st.text_input("–ù–æ–º–µ—Ä –±–ª–∞–Ω–∫–∞:", value=st.session_state.blank_number, placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –±–ª–∞–Ω–∫–∞")
    
    # –ü–æ–ª—è –≤–≤–æ–¥–∞ –¥–ª—è —É—á–µ—Ç–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –∏ –Ω–æ–º–µ—Ä–∞ –∫–ª–∞—Å—Ç–µ—Ä–∞
    account_number = st.text_input(
        "–£—á–µ—Ç–Ω—ã–π –Ω–æ–º–µ—Ä (—Ñ–æ—Ä–º–∞—Ç: –ú–ú-–ù–ù–ù/–ì–ì):", 
        value=st.session_state.account_number,
        placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: 05-002/25",
        disabled=not st.session_state.can_edit
    )
    
    cluster_number = st.text_input(
        "–ù–æ–º–µ—Ä –∫–ª–∞—Å—Ç–µ—Ä–∞ (—Ñ–æ—Ä–º–∞—Ç: –ö–ì–ì/–ú–ú-–ù–ù–ù):", 
        value=st.session_state.cluster_number,
        placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ö25/05-099",
        disabled=not st.session_state.can_edit
    )
    
    # –ö–Ω–æ–ø–∫–∏
    col1, col2, col3 = st.columns(3)
    with col1:
        check_button = st.button("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å/–û–±–Ω–æ–≤–∏—Ç—å")
    with col2:
        save_button = st.button("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å", disabled=not st.session_state.can_edit)
    with col3:
        reset_button = st.button("–°–±—Ä–æ—Å–∏—Ç—å")
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–±—Ä–æ—Å–∞ —Ñ–æ—Ä–º—ã
    if reset_button:
        st.session_state.blank_number = ""
        st.session_state.account_number = ""
        st.session_state.cluster_number = ""
        st.session_state.record_found = False
        st.session_state.can_edit = False
        st.experimental_rerun()
    
    # –õ–æ–≥–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–º–µ—Ä–∞ –±–ª–∞–Ω–∫–∞
    if check_button:
        if not blank_number:
            st.warning("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –±–ª–∞–Ω–∫–∞")
        else:
            df = load_data()
            if not df.empty:
                # –ü–æ–∏—Å–∫ –∑–∞–ø–∏—Å–∏ –ø–æ –Ω–æ–º–µ—Ä—É –±–ª–∞–Ω–∫–∞
                record = df[df["–ù–æ–º–µ—Ä_–±–ª–∞–Ω–∫–∞"] == blank_number]
                if record.empty:
                    st.warning(f"–ë–ª–∞–Ω–∫ —Å –Ω–æ–º–µ—Ä–æ–º {blank_number} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
                    st.session_state.record_found = False
                    st.session_state.can_edit = False
                else:
                    st.session_state.blank_number = blank_number
                    st.session_state.record_found = True
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –ª–∏ —É—á–µ—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∏ –Ω–æ–º–µ—Ä –∫–ª–∞—Å—Ç–µ—Ä–∞
                    account_filled = pd.notna(record.iloc[0]["–£—á–µ—Ç–Ω—ã–π_–Ω–æ–º–µ—Ä"]) and record.iloc[0]["–£—á–µ—Ç–Ω—ã–π_–Ω–æ–º–µ—Ä"] != ""
                    cluster_filled = pd.notna(record.iloc[0]["–ù–æ–º–µ—Ä_–∫–ª–∞—Å—Ç–µ—Ä–∞"]) and record.iloc[0]["–ù–æ–º–µ—Ä_–∫–ª–∞—Å—Ç–µ—Ä–∞"] != ""
                    
                    if account_filled and cluster_filled:
                        st.info(f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –Ω–æ–º–µ—Ä—É –±–ª–∞–Ω–∫–∞ {blank_number} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.\n–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –Ω–æ–º–µ—Ä.")
                        st.session_state.can_edit = False
                    else:
                        st.success(f"–ë–ª–∞–Ω–∫ {blank_number} –Ω–∞–π–¥–µ–Ω. –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.")
                        st.session_state.can_edit = True
                        
                        # –ü—Ä–µ–¥–∑–∞–ø–æ–ª–Ω—è–µ–º –ø–æ–ª—è, –µ—Å–ª–∏ –æ–Ω–∏ —É–∂–µ –µ—Å—Ç—å –≤ –±–∞–∑–µ
                        if account_filled:
                            st.session_state.account_number = record.iloc[0]["–£—á–µ—Ç–Ω—ã–π_–Ω–æ–º–µ—Ä"]
                        if cluster_filled:
                            st.session_state.cluster_number = record.iloc[0]["–ù–æ–º–µ—Ä_–∫–ª–∞—Å—Ç–µ—Ä–∞"]
                        
                        st.experimental_rerun()
    
    # –õ–æ–≥–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
    if save_button:
        if not blank_number:
            st.warning("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –±–ª–∞–Ω–∫–∞")
        elif not account_number:
            st.warning("–í–≤–µ–¥–∏—Ç–µ —É—á–µ—Ç–Ω—ã–π –Ω–æ–º–µ—Ä")
        elif not cluster_number:
            st.warning("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–ª–∞—Å—Ç–µ—Ä–∞")
        else:
            # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–æ–≤
            if not validate_account_number(account_number):
                st.error("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —É—á–µ—Ç–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: –ú–ú-–ù–ù–ù/–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä, 05-002/25)")
            elif not validate_cluster_number(cluster_number):
                st.error("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ –∫–ª–∞—Å—Ç–µ—Ä–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: –ö–ì–ì/–ú–ú-–ù–ù–ù (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ö25/05-099)")
            elif check_account_number_exists(account_number):
                st.error(f"–£—á–µ—Ç–Ω—ã–π –Ω–æ–º–µ—Ä {account_number} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!")
            elif check_cluster_number_exists(cluster_number):
                st.error(f"–ù–æ–º–µ—Ä –∫–ª–∞—Å—Ç–µ—Ä–∞ {cluster_number} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!")
            else:
                df = load_data()
                if not df.empty:
                    # –ü–æ–∏—Å–∫ –∑–∞–ø–∏—Å–∏ –ø–æ –Ω–æ–º–µ—Ä—É –±–ª–∞–Ω–∫–∞
                    mask = df["–ù–æ–º–µ—Ä_–±–ª–∞–Ω–∫–∞"] == blank_number
                    if mask.any():
                        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏
                        df.loc[mask, "–£—á–µ—Ç–Ω—ã–π_–Ω–æ–º–µ—Ä"] = account_number
                        df.loc[mask, "–ù–æ–º–µ—Ä_–∫–ª–∞—Å—Ç–µ—Ä–∞"] = cluster_number
                        df.loc[mask, "–°—Ç–∞—Ç—É—Å"] = "–ó–∞–≤–µ—Ä—à–µ–Ω–∞"
                        df.loc[mask, "–î–∞—Ç–∞_—Å–æ–∑–¥–∞–Ω–∏—è"] = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
                        
                        if save_data(df):
                            st.success("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")
                            # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
                            st.session_state.blank_number = ""
                            st.session_state.account_number = ""
                            st.session_state.cluster_number = ""
                            st.session_state.record_found = False
                            st.session_state.can_edit = False
                            st.experimental_rerun()
                        else:
                            st.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö")
                    else:
                        st.warning(f"–ë–ª–∞–Ω–∫ —Å –Ω–æ–º–µ—Ä–æ–º {blank_number} –Ω–µ –Ω–∞–π–¥–µ–Ω")

# –í–∫–ª–∞–¥–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
with tab2:
    st.header("–ü—Ä–æ—Å–º–æ—Ç—Ä –¥–∞–Ω–Ω—ã—Ö")
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    df = load_data()
    if not df.empty:
        # –ü–æ–∏—Å–∫
        search_term = st.text_input("–ü–æ–∏—Å–∫ –ø–æ –¥–∞–Ω–Ω—ã–º:", placeholder="–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞")
        
        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
        if search_term:
            # –ü–æ–∏—Å–∫ –ø–æ –≤—Å–µ–º –ø–æ–ª—è–º
            filtered_df = df[
                df.apply(lambda row: row.astype(str).str.contains(search_term, case=False, na=False)).any(axis=1)
            ]
        else:
            filtered_df = df
        
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
        st.dataframe(filtered_df, use_container_width=True, height=500)
        
        # –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        if st.button("–û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ"):
            st.experimental_rerun()
    else:
        st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")

# –í–∫–ª–∞–¥–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
with tab3:
    st.header("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
    
    df = load_data()
    if not df.empty:
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—É —Å–æ–∑–¥–∞–Ω–∏—è –≤ datetime
        df["–î–∞—Ç–∞_—Å–æ–∑–¥–∞–Ω–∏—è"] = pd.to_datetime(df["–î–∞—Ç–∞_—Å–æ–∑–¥–∞–Ω–∏—è"], errors='coerce')
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_cards = len(df)
        completed_cards = len(df[df["–°—Ç–∞—Ç—É—Å"] == "–ó–∞–≤–µ—Ä—à–µ–Ω–∞"])
        # –ù–µ–∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã - —ç—Ç–æ —Ç–µ, —É –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç —É—á–µ—Ç–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –∏–ª–∏ –Ω–æ–º–µ—Ä–∞ –∫–ª–∞—Å—Ç–µ—Ä–∞
        incomplete_cards = len(df[
            (pd.isna(df["–£—á–µ—Ç–Ω—ã–π_–Ω–æ–º–µ—Ä"]) | (df["–£—á–µ—Ç–Ω—ã–π_–Ω–æ–º–µ—Ä"] == "")) |
            (pd.isna(df["–ù–æ–º–µ—Ä_–∫–ª–∞—Å—Ç–µ—Ä–∞"]) | (df["–ù–æ–º–µ—Ä_–∫–ª–∞—Å—Ç–µ—Ä–∞"] == ""))
        ])
        
        col1, col2, col3 = st.columns(3)
        col1.metric("–í—Å–µ–≥–æ –∫–∞—Ä—Ç", total_cards)
        col2.metric("–ó–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã", completed_cards)
        col3.metric("–ù–µ–∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã", incomplete_cards)
        
        # –ü—Ä–æ—Ü–µ–Ω—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è
        if total_cards > 0:
            completion_rate = (completed_cards / total_cards) * 100
            st.progress(completion_rate / 100)
            st.write(f"–ü—Ä–æ—Ü–µ–Ω—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è: {completion_rate:.2f}%")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–µ—Ä–∏–æ–¥–∞–º
        st.subheader("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–µ—Ä–∏–æ–¥–∞–º")
        
        # –í—ã–±–æ—Ä –ø–µ—Ä–∏–æ–¥–∞
        period_options = ["–í—Å–µ –≤—Ä–µ–º—è", "–°–µ–≥–æ–¥–Ω—è", "–¢–µ–∫—É—â–∏–π –º–µ—Å—è—Ü", "–ü—Ä–æ—à–ª—ã–π –º–µ—Å—è—Ü", "–ü–æ—Å–ª–µ–¥–Ω–∏–µ 3 –º–µ—Å—è—Ü–∞", "–¢–µ–∫—É—â–∏–π –≥–æ–¥", "–ü—Ä–æ—à–ª—ã–π –≥–æ–¥"]
        selected_period = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥:", period_options)
        
        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –ø–µ—Ä–∏–æ–¥—É
        if selected_period == "–°–µ–≥–æ–¥–Ω—è":
            start_date = datetime.now().date()
            filtered_df = df[df["–î–∞—Ç–∞_—Å–æ–∑–¥–∞–Ω–∏—è"].dt.date == start_date]
        elif selected_period == "–¢–µ–∫—É—â–∏–π –º–µ—Å—è—Ü":
            start_date = datetime.now().replace(day=1).date()
            end_date = datetime.now().date()
            filtered_df = df[
                (df["–î–∞—Ç–∞_—Å–æ–∑–¥–∞–Ω–∏—è"].dt.date >= start_date) &
                (df["–î–∞—Ç–∞_—Å–æ–∑–¥–∞–Ω–∏—è"].dt.date <= end_date)
            ]
        elif selected_period == "–ü—Ä–æ—à–ª—ã–π –º–µ—Å—è—Ü":
            first_day_current = datetime.now().replace(day=1)
            end_date = first_day_current - timedelta(days=1)
            start_date = end_date.replace(day=1)
            filtered_df = df[
                (df["–î–∞—Ç–∞_—Å–æ–∑–¥–∞–Ω–∏—è"].dt.date >= start_date.date()) &
                (df["–î–∞—Ç–∞_—Å–æ–∑–¥–∞–Ω–∏—è"].dt.date <= end_date.date())
            ]
        elif selected_period == "–ü–æ—Å–ª–µ–¥–Ω–∏–µ 3 –º–µ—Å—è—Ü–∞":
            end_date = datetime.now().date()
            start_date = (datetime.now() - timedelta(days=90)).date()
            filtered_df = df[
                (df["–î–∞—Ç–∞_—Å–æ–∑–¥–∞–Ω–∏—è"].dt.date >= start_date) &
                (df["–î–∞—Ç–∞_—Å–æ–∑–¥–∞–Ω–∏—è"].dt.date <= end_date)
            ]
        elif selected_period == "–¢–µ–∫—É—â–∏–π –≥–æ–¥":
            current_year = datetime.now().year
            filtered_df = df[df["–î–∞—Ç–∞_—Å–æ–∑–¥–∞–Ω–∏—è"].dt.year == current_year]
        elif selected_period == "–ü—Ä–æ—à–ª—ã–π –≥–æ–¥":
            last_year = datetime.now().year - 1
            filtered_df = df[df["–î–∞—Ç–∞_—Å–æ–∑–¥–∞–Ω–∏—è"].dt.year == last_year]
        else:  # –í—Å–µ –≤—Ä–µ–º—è
            filtered_df = df
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –ø–µ—Ä–∏–æ–¥—É
        period_total = len(filtered_df) if not filtered_df.empty else 0
        if not filtered_df.empty:
            period_completed = len(filtered_df[filtered_df["–°—Ç–∞—Ç—É—Å"] == "–ó–∞–≤–µ—Ä—à–µ–Ω–∞"])
            period_incomplete = len(filtered_df[
                (pd.isna(filtered_df["–£—á–µ—Ç–Ω—ã–π_–Ω–æ–º–µ—Ä"]) | (filtered_df["–£—á–µ—Ç–Ω—ã–π_–Ω–æ–º–µ—Ä"] == "")) |
                (pd.isna(filtered_df["–ù–æ–º–µ—Ä_–∫–ª–∞—Å—Ç–µ—Ä–∞"]) | (filtered_df["–ù–æ–º–µ—Ä_–∫–ª–∞—Å—Ç–µ—Ä–∞"] == ""))
            ])
        else:
            period_completed = 0
            period_incomplete = 0
        
        st.subheader(f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥: {selected_period}")
        col1, col2, col3 = st.columns(3)
        col1.metric("–í—Å–µ–≥–æ –∫–∞—Ä—Ç", period_total)
        col2.metric("–ó–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã", period_completed)
        col3.metric("–ù–µ–∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã", period_incomplete)
        
        # –ü—Ä–æ—Ü–µ–Ω—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞ –ø–µ—Ä–∏–æ–¥
        if period_total > 0:
            period_completion_rate = (period_completed / period_total) * 100
            st.progress(period_completion_rate / 100)
            st.write(f"–ü—Ä–æ—Ü–µ–Ω—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞ –ø–µ—Ä–∏–æ–¥: {period_completion_rate:.2f}%")
        
        # –ì—Ä–∞—Ñ–∏–∫ –ø–æ –º–µ—Å—è—Ü–∞–º (–µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω –ø–µ—Ä–∏–æ–¥ "–í—Å–µ –≤—Ä–µ–º—è")
        if selected_period == "–í—Å–µ –≤—Ä–µ–º—è":
            st.subheader("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –º–µ—Å—è—Ü–∞–º")
            # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –∏ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –º–µ—Å—è—Ü–∞–º
            monthly_stats = df.groupby(df["–î–∞—Ç–∞_—Å–æ–∑–¥–∞–Ω–∏—è"].dt.to_period("M")).size().reset_index(name="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ")
            if not monthly_stats.empty:
                monthly_stats["–ú–µ—Å—è—Ü"] = monthly_stats["–î–∞—Ç–∞_—Å–æ–∑–¥–∞–Ω–∏—è"].astype(str)
                
                # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
                st.bar_chart(monthly_stats.set_index("–ú–µ—Å—è—Ü")["–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"])
            else:
                st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞")
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        st.subheader("–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
        
        # –¢–æ–ø-10 —É—á–µ—Ç–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤
        st.write("–¢–æ–ø-10 —É—á–µ—Ç–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤:")
        top_account_numbers = df["–£—á–µ—Ç–Ω—ã–π_–Ω–æ–º–µ—Ä"].value_counts().head(10)
        if not top_account_numbers.empty:
            st.table(top_account_numbers)
        else:
            st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ —É—á–µ—Ç–Ω—ã–º –Ω–æ–º–µ—Ä–∞–º")
        
        # –¢–æ–ø-10 –Ω–æ–º–µ—Ä–æ–≤ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤
        st.write("–¢–æ–ø-10 –Ω–æ–º–µ—Ä–æ–≤ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤:")
        top_cluster_numbers = df["–ù–æ–º–µ—Ä_–∫–ª–∞—Å—Ç–µ—Ä–∞"].value_counts().head(10)
        if not top_cluster_numbers.empty:
            st.table(top_cluster_numbers)
        else:
            st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –Ω–æ–º–µ—Ä–∞–º –∫–ª–∞—Å—Ç–µ—Ä–æ–≤")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
        st.write("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º:")
        status_stats = df["–°—Ç–∞—Ç—É—Å"].value_counts()
        if not status_stats.empty:
            st.bar_chart(status_stats)
        else:
            st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≥–æ–¥–∞–º
        st.write("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≥–æ–¥–∞–º:")
        yearly_stats = df.groupby(df["–î–∞—Ç–∞_—Å–æ–∑–¥–∞–Ω–∏—è"].dt.year).size()
        if not yearly_stats.empty:
            st.bar_chart(yearly_stats)
        else:
            st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –≥–æ–¥–∞–º")
    else:
        st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
if __name__ == "__main__":
    # –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
    create_excel_file()